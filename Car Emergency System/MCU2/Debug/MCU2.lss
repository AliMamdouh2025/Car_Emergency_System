
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000014f4  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800168  00800168  00001690  2**0
                  ALLOC
  3 .stab         0000222c  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001550  00000000  00000000  000038bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  000050e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  00006bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  00007aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008900  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  00008a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  00008d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000095a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ef       	ldi	r30, 0xF4	; 244
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 09 0a 	call	0x1412	; 0x1412 <main>
      8a:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__stack+0xd>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     be0:	fc 01       	movw	r30, r24
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 11 to choose internal voltage = 2.56v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (ADMUX & 0x3f) | ((Config_Ptr->ref_volt)<<6);
     be2:	97 b1       	in	r25, 0x07	; 7
     be4:	80 81       	ld	r24, Z
     be6:	82 95       	swap	r24
     be8:	88 0f       	add	r24, r24
     bea:	88 0f       	add	r24, r24
     bec:	80 7c       	andi	r24, 0xC0	; 192
     bee:	9f 73       	andi	r25, 0x3F	; 63
     bf0:	89 2b       	or	r24, r25
     bf2:	87 b9       	out	0x07, r24	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (ADCSRA & 0xf8) | (Config_Ptr->prescaler);
     bf4:	96 b1       	in	r25, 0x06	; 6
     bf6:	81 81       	ldd	r24, Z+1	; 0x01
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	98 77       	andi	r25, 0x78	; 120
     bfc:	89 2b       	or	r24, r25
     bfe:	86 b9       	out	0x06, r24	; 6
}
     c00:	08 95       	ret

00000c02 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     c02:	97 b1       	in	r25, 0x07	; 7
     c04:	90 7e       	andi	r25, 0xE0	; 224
     c06:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     c08:	97 b1       	in	r25, 0x07	; 7
     c0a:	87 70       	andi	r24, 0x07	; 7
     c0c:	89 2b       	or	r24, r25
     c0e:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     c10:	36 9a       	sbi	0x06, 6	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     c12:	34 9b       	sbis	0x06, 4	; 6
     c14:	fe cf       	rjmp	.-4      	; 0xc12 <ADC_readChannel+0x10>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     c16:	34 9a       	sbi	0x06, 4	; 6
	return ADC; /* Read the digital value from the data register */
     c18:	24 b1       	in	r18, 0x04	; 4
     c1a:	35 b1       	in	r19, 0x05	; 5
}
     c1c:	c9 01       	movw	r24, r18
     c1e:	08 95       	ret

00000c20 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c20:	68 30       	cpi	r22, 0x08	; 8
     c22:	50 f4       	brcc	.+20     	; 0xc38 <GPIO_setupPinDirection+0x18>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	40 f4       	brcc	.+16     	; 0xc38 <GPIO_setupPinDirection+0x18>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	29 f1       	breq	.+74     	; 0xc76 <GPIO_setupPinDirection+0x56>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <GPIO_setupPinDirection+0x1a>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	79 f1       	breq	.+94     	; 0xc92 <GPIO_setupPinDirection+0x72>
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	81 f0       	breq	.+32     	; 0xc58 <GPIO_setupPinDirection+0x38>
     c38:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c3a:	41 30       	cpi	r20, 0x01	; 1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <GPIO_setupPinDirection+0x20>
     c3e:	4d c0       	rjmp	.+154    	; 0xcda <GPIO_setupPinDirection+0xba>
			{
				SET_BIT(DDRA,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c40:	2a b3       	in	r18, 0x1a	; 26
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <GPIO_setupPinDirection+0x2c>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	6a 95       	dec	r22
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <GPIO_setupPinDirection+0x28>
     c50:	80 95       	com	r24
     c52:	82 23       	and	r24, r18
     c54:	8a bb       	out	0x1a, r24	; 26
     c56:	08 95       	ret
			{
				CLEAR_BIT(DDRC,pin_num);
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     c58:	41 30       	cpi	r20, 0x01	; 1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <GPIO_setupPinDirection+0x3e>
     c5c:	49 c0       	rjmp	.+146    	; 0xcf0 <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     c5e:	21 b3       	in	r18, 0x11	; 17
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <GPIO_setupPinDirection+0x4a>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	6a 95       	dec	r22
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <GPIO_setupPinDirection+0x46>
     c6e:	80 95       	com	r24
     c70:	82 23       	and	r24, r18
     c72:	81 bb       	out	0x11, r24	; 17
     c74:	08 95       	ret
			{
				CLEAR_BIT(DDRA,pin_num);
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c76:	41 30       	cpi	r20, 0x01	; 1
     c78:	29 f1       	breq	.+74     	; 0xcc4 <GPIO_setupPinDirection+0xa4>
			{
				SET_BIT(DDRB,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c7a:	27 b3       	in	r18, 0x17	; 23
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <GPIO_setupPinDirection+0x66>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	6a 95       	dec	r22
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <GPIO_setupPinDirection+0x62>
     c8a:	80 95       	com	r24
     c8c:	82 23       	and	r24, r18
     c8e:	87 bb       	out	0x17, r24	; 23
     c90:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c92:	41 30       	cpi	r20, 0x01	; 1
     c94:	61 f0       	breq	.+24     	; 0xcae <GPIO_setupPinDirection+0x8e>
			{
				SET_BIT(DDRC,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c96:	24 b3       	in	r18, 0x14	; 20
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <GPIO_setupPinDirection+0x82>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <GPIO_setupPinDirection+0x7e>
     ca6:	80 95       	com	r24
     ca8:	82 23       	and	r24, r18
     caa:	84 bb       	out	0x14, r24	; 20
     cac:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
			{
				SET_BIT(DDRC,pin_num);
     cae:	24 b3       	in	r18, 0x14	; 20
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <GPIO_setupPinDirection+0x9a>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	6a 95       	dec	r22
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <GPIO_setupPinDirection+0x96>
     cbe:	28 2b       	or	r18, r24
     cc0:	24 bb       	out	0x14, r18	; 20
     cc2:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
			{
				SET_BIT(DDRB,pin_num);
     cc4:	27 b3       	in	r18, 0x17	; 23
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <GPIO_setupPinDirection+0xb0>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	6a 95       	dec	r22
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <GPIO_setupPinDirection+0xac>
     cd4:	28 2b       	or	r18, r24
     cd6:	27 bb       	out	0x17, r18	; 23
     cd8:	08 95       	ret
		switch(port_num)
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
			{
				SET_BIT(DDRA,pin_num);
     cda:	2a b3       	in	r18, 0x1a	; 26
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <GPIO_setupPinDirection+0xc6>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	6a 95       	dec	r22
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <GPIO_setupPinDirection+0xc2>
     cea:	28 2b       	or	r18, r24
     cec:	2a bb       	out	0x1a, r18	; 26
     cee:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
			{
				SET_BIT(DDRD,pin_num);
     cf0:	21 b3       	in	r18, 0x11	; 17
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_setupPinDirection+0xdc>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	6a 95       	dec	r22
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_setupPinDirection+0xd8>
     d00:	28 2b       	or	r18, r24
     d02:	21 bb       	out	0x11, r18	; 17
     d04:	08 95       	ret

00000d06 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d06:	68 30       	cpi	r22, 0x08	; 8
     d08:	50 f4       	brcc	.+20     	; 0xd1e <GPIO_writePin+0x18>
     d0a:	84 30       	cpi	r24, 0x04	; 4
     d0c:	40 f4       	brcc	.+16     	; 0xd1e <GPIO_writePin+0x18>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	29 f1       	breq	.+74     	; 0xd5c <GPIO_writePin+0x56>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	28 f0       	brcs	.+10     	; 0xd20 <GPIO_writePin+0x1a>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	79 f1       	breq	.+94     	; 0xd78 <GPIO_writePin+0x72>
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	81 f0       	breq	.+32     	; 0xd3e <GPIO_writePin+0x38>
     d1e:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d20:	41 30       	cpi	r20, 0x01	; 1
     d22:	09 f4       	brne	.+2      	; 0xd26 <GPIO_writePin+0x20>
     d24:	4d c0       	rjmp	.+154    	; 0xdc0 <GPIO_writePin+0xba>
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     d26:	2b b3       	in	r18, 0x1b	; 27
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <GPIO_writePin+0x2c>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <GPIO_writePin+0x28>
     d36:	80 95       	com	r24
     d38:	82 23       	and	r24, r18
     d3a:	8b bb       	out	0x1b, r24	; 27
     d3c:	08 95       	ret
			{
				CLEAR_BIT(PORTC,pin_num);
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     d3e:	41 30       	cpi	r20, 0x01	; 1
     d40:	09 f4       	brne	.+2      	; 0xd44 <GPIO_writePin+0x3e>
     d42:	49 c0       	rjmp	.+146    	; 0xdd6 <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     d44:	22 b3       	in	r18, 0x12	; 18
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <GPIO_writePin+0x4a>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	6a 95       	dec	r22
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <GPIO_writePin+0x46>
     d54:	80 95       	com	r24
     d56:	82 23       	and	r24, r18
     d58:	82 bb       	out	0x12, r24	; 18
     d5a:	08 95       	ret
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     d5c:	41 30       	cpi	r20, 0x01	; 1
     d5e:	29 f1       	breq	.+74     	; 0xdaa <GPIO_writePin+0xa4>
			{
				SET_BIT(PORTB,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     d60:	28 b3       	in	r18, 0x18	; 24
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <GPIO_writePin+0x66>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	6a 95       	dec	r22
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <GPIO_writePin+0x62>
     d70:	80 95       	com	r24
     d72:	82 23       	and	r24, r18
     d74:	88 bb       	out	0x18, r24	; 24
     d76:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     d78:	41 30       	cpi	r20, 0x01	; 1
     d7a:	61 f0       	breq	.+24     	; 0xd94 <GPIO_writePin+0x8e>
			{
				SET_BIT(PORTC,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     d7c:	25 b3       	in	r18, 0x15	; 21
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_writePin+0x82>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	6a 95       	dec	r22
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_writePin+0x7e>
     d8c:	80 95       	com	r24
     d8e:	82 23       	and	r24, r18
     d90:	85 bb       	out	0x15, r24	; 21
     d92:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTC,pin_num);
     d94:	25 b3       	in	r18, 0x15	; 21
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_writePin+0x9a>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	6a 95       	dec	r22
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <GPIO_writePin+0x96>
     da4:	28 2b       	or	r18, r24
     da6:	25 bb       	out	0x15, r18	; 21
     da8:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTB,pin_num);
     daa:	28 b3       	in	r18, 0x18	; 24
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <GPIO_writePin+0xb0>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	6a 95       	dec	r22
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <GPIO_writePin+0xac>
     dba:	28 2b       	or	r18, r24
     dbc:	28 bb       	out	0x18, r18	; 24
     dbe:	08 95       	ret
		switch(port_num)
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
     dc0:	2b b3       	in	r18, 0x1b	; 27
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_writePin+0xc6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	6a 95       	dec	r22
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_writePin+0xc2>
     dd0:	28 2b       	or	r18, r24
     dd2:	2b bb       	out	0x1b, r18	; 27
     dd4:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTD,pin_num);
     dd6:	22 b3       	in	r18, 0x12	; 18
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <GPIO_writePin+0xdc>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	6a 95       	dec	r22
     de4:	e2 f7       	brpl	.-8      	; 0xdde <GPIO_writePin+0xd8>
     de6:	28 2b       	or	r18, r24
     de8:	22 bb       	out	0x12, r18	; 18
     dea:	08 95       	ret

00000dec <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dec:	68 30       	cpi	r22, 0x08	; 8
     dee:	50 f4       	brcc	.+20     	; 0xe04 <GPIO_readPin+0x18>
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	40 f4       	brcc	.+16     	; 0xe04 <GPIO_readPin+0x18>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	d1 f0       	breq	.+52     	; 0xe2c <GPIO_readPin+0x40>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	30 f0       	brcs	.+12     	; 0xe08 <GPIO_readPin+0x1c>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	f9 f0       	breq	.+62     	; 0xe3e <GPIO_readPin+0x52>
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	59 f0       	breq	.+22     	; 0xe1a <GPIO_readPin+0x2e>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     e04:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     e06:	08 95       	ret
	{
		/* Read the pin value as required */
		switch(port_num)
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     e08:	89 b3       	in	r24, 0x19	; 25
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <GPIO_readPin+0x26>
     e0e:	95 95       	asr	r25
     e10:	87 95       	ror	r24
     e12:	6a 95       	dec	r22
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <GPIO_readPin+0x22>
     e16:	81 70       	andi	r24, 0x01	; 1
     e18:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     e1a:	80 b3       	in	r24, 0x10	; 16
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_readPin+0x38>
     e20:	95 95       	asr	r25
     e22:	87 95       	ror	r24
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_readPin+0x34>
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     e2c:	86 b3       	in	r24, 0x16	; 22
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <GPIO_readPin+0x4a>
     e32:	95 95       	asr	r25
     e34:	87 95       	ror	r24
     e36:	6a 95       	dec	r22
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <GPIO_readPin+0x46>
     e3a:	81 70       	andi	r24, 0x01	; 1
     e3c:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     e3e:	83 b3       	in	r24, 0x13	; 19
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_readPin+0x5c>
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	6a 95       	dec	r22
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_readPin+0x58>
     e4c:	81 70       	andi	r24, 0x01	; 1
     e4e:	08 95       	ret

00000e50 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	40 f4       	brcc	.+16     	; 0xe64 <GPIO_setupPortDirection+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	49 f0       	breq	.+18     	; 0xe6a <GPIO_setupPortDirection+0x1a>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	28 f0       	brcs	.+10     	; 0xe66 <GPIO_setupPortDirection+0x16>
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	49 f0       	breq	.+18     	; 0xe72 <GPIO_setupPortDirection+0x22>
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	29 f0       	breq	.+10     	; 0xe6e <GPIO_setupPortDirection+0x1e>
     e64:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
     e66:	6a bb       	out	0x1a, r22	; 26
     e68:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
     e6a:	67 bb       	out	0x17, r22	; 23
     e6c:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
			break;
		case PORTD_ID:
			DDRD = direction;
     e6e:	61 bb       	out	0x11, r22	; 17
     e70:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
			break;
		case PORTC_ID:
			DDRC = direction;
     e72:	64 bb       	out	0x14, r22	; 20
     e74:	08 95       	ret

00000e76 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	40 f4       	brcc	.+16     	; 0xe8a <GPIO_writePort+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	49 f0       	breq	.+18     	; 0xe90 <GPIO_writePort+0x1a>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	28 f0       	brcs	.+10     	; 0xe8c <GPIO_writePort+0x16>
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	49 f0       	breq	.+18     	; 0xe98 <GPIO_writePort+0x22>
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	29 f0       	breq	.+10     	; 0xe94 <GPIO_writePort+0x1e>
     e8a:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
     e8c:	6b bb       	out	0x1b, r22	; 27
     e8e:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
     e90:	68 bb       	out	0x18, r22	; 24
     e92:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
			break;
		case PORTD_ID:
			PORTD = value;
     e94:	62 bb       	out	0x12, r22	; 18
     e96:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
			break;
		case PORTC_ID:
			PORTC = value;
     e98:	65 bb       	out	0x15, r22	; 21
     e9a:	08 95       	ret

00000e9c <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e9c:	84 30       	cpi	r24, 0x04	; 4
     e9e:	40 f4       	brcc	.+16     	; 0xeb0 <GPIO_readPort+0x14>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	51 f0       	breq	.+20     	; 0xeb8 <GPIO_readPort+0x1c>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	30 f0       	brcs	.+12     	; 0xeb4 <GPIO_readPort+0x18>
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	51 f0       	breq	.+20     	; 0xec0 <GPIO_readPort+0x24>
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	31 f0       	breq	.+12     	; 0xebc <GPIO_readPort+0x20>
			break;
		case PORTC_ID:
			value = PINC;
			break;
		case PORTD_ID:
			value = PIND;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
     eb2:	08 95       	ret
	{
		/* Read the port value as required */
		switch(port_num)
		{
		case PORTA_ID:
			value = PINA;
     eb4:	89 b3       	in	r24, 0x19	; 25
     eb6:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
     eb8:	86 b3       	in	r24, 0x16	; 22
     eba:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
			break;
		case PORTD_ID:
			value = PIND;
     ebc:	80 b3       	in	r24, 0x10	; 16
     ebe:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
			break;
		case PORTC_ID:
			value = PINC;
     ec0:	83 b3       	in	r24, 0x13	; 19
     ec2:	08 95       	ret

00000ec4 <PWM_Timer0_Start>:
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{

	TCNT0 = 0; // Set Timer Initial Value to 0
     ec4:	12 be       	out	0x32, r1	; 50

	OCR0  = duty_cycle; //Set Compare value
     ec6:	8c bf       	out	0x3c, r24	; 60

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     ec8:	bb 9a       	sbi	0x17, 3	; 23
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     eca:	8a e6       	ldi	r24, 0x6A	; 106
     ecc:	83 bf       	out	0x33, r24	; 51
}
     ece:	08 95       	ret

00000ed0 <PWM_Timer0_OFF>:


void PWM_Timer0_OFF(void)
{
	TCNT0 = 0;
     ed0:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
     ed2:	1c be       	out	0x3c, r1	; 60
	TCCR0 = 0;
     ed4:	13 be       	out	0x33, r1	; 51

}
     ed6:	08 95       	ret

00000ed8 <UartReceive_setCallBack>:
static volatile void (*g_callBackPtrReceive)(void) = NULL_PTR;

void UartReceive_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrReceive = a_ptr;
     ed8:	90 93 69 01 	sts	0x0169, r25
     edc:	80 93 68 01 	sts	0x0168, r24
}
     ee0:	08 95       	ret

00000ee2 <__vector_13>:

ISR(USART_RXC_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
	if(g_callBackPtrReceive != NULL_PTR)
     f04:	e0 91 68 01 	lds	r30, 0x0168
     f08:	f0 91 69 01 	lds	r31, 0x0169
     f0c:	30 97       	sbiw	r30, 0x00	; 0
     f0e:	09 f0       	breq	.+2      	; 0xf12 <__vector_13+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrReceive)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f10:	09 95       	icall
	}
}
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
	uint16 ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) ;
     f3c:	88 e9       	ldi	r24, 0x98	; 152
     f3e:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     f40:	86 e8       	ldi	r24, 0x86	; 134
     f42:	80 bd       	out	0x20, r24	; 32

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	44 1f       	adc	r20, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	44 1f       	adc	r20, r20
     f52:	55 1f       	adc	r21, r21
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	44 1f       	adc	r20, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	60 e4       	ldi	r22, 0x40	; 64
     f5e:	72 e4       	ldi	r23, 0x42	; 66
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 1f 0a 	call	0x143e	; 0x143e <__udivmodsi4>
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	30 40       	sbci	r19, 0x00	; 0

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     f6c:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
     f6e:	29 b9       	out	0x09, r18	; 9
}
     f70:	08 95       	ret

00000f72 <UART_sendByte>:
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f72:	5d 9b       	sbis	0x0b, 5	; 11
     f74:	fe cf       	rjmp	.-4      	; 0xf72 <UART_sendByte>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f76:	8c b9       	out	0x0c, r24	; 12
}
     f78:	08 95       	ret

00000f7a <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
	return UDR;
     f7a:	8c b1       	in	r24, 0x0c	; 12
}
     f7c:	08 95       	ret

00000f7e <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
     f7e:	dc 01       	movw	r26, r24
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     f80:	ec 91       	ld	r30, X
     f82:	ee 23       	and	r30, r30
     f84:	59 f0       	breq	.+22     	; 0xf9c <UART_sendString+0x1e>
     f86:	80 e0       	ldi	r24, 0x00	; 0
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f88:	5d 9b       	sbis	0x0b, 5	; 11
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <UART_sendString+0xa>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f8c:	ec b9       	out	0x0c, r30	; 12

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     f90:	fd 01       	movw	r30, r26
     f92:	e8 0f       	add	r30, r24
     f94:	f1 1d       	adc	r31, r1
     f96:	e0 81       	ld	r30, Z
     f98:	ee 23       	and	r30, r30
     f9a:	b1 f7       	brne	.-20     	; 0xf88 <UART_sendString+0xa>
     f9c:	08 95       	ret

00000f9e <Buzzer_on>:
 * Description :
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,0);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
}
     fa8:	08 95       	ret

00000faa <Buzzer_off>:
 * Description :
 * Function to enable the Buzzer through the GPIO
 */
void Buzzer_off(void)
{
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,1);
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	62 e0       	ldi	r22, 0x02	; 2
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
}
     fb4:	08 95       	ret

00000fb6 <Buzzer_init>:
 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
 *  Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
	GPIO_setupPinDirection(Buzzer_Port,Buzzer_Pin,PIN_OUTPUT);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,0);
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
}
     fca:	08 95       	ret

00000fcc <Voltage_Percent>:
#include "adc.h" ///delay


Volt_Percent_t Voltage_Percent(void)
{
	uint16 Value = ADC_readChannel(POTENTIOMETER_CHANNEL);
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0e 94 01 06 	call	0xc02	; 0xc02 <ADC_readChannel>

	if(Value <= 102)
     fd2:	87 36       	cpi	r24, 0x67	; 103
     fd4:	91 05       	cpc	r25, r1
     fd6:	00 f1       	brcs	.+64     	; 0x1018 <Voltage_Percent+0x4c>
	{
		return Volt_10_Percent;
	}
	else if(Value <= 204)
     fd8:	8d 3c       	cpi	r24, 0xCD	; 205
     fda:	91 05       	cpc	r25, r1
     fdc:	f8 f0       	brcs	.+62     	; 0x101c <Voltage_Percent+0x50>
	{
		return Volt_20_Percent;
	}
	else if(Value <= 306)
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	83 33       	cpi	r24, 0x33	; 51
     fe2:	92 07       	cpc	r25, r18
     fe4:	f8 f0       	brcs	.+62     	; 0x1024 <Voltage_Percent+0x58>
	{
		return Volt_30_Percent;
	}
	else if(Value <= 408)
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	89 39       	cpi	r24, 0x99	; 153
     fea:	92 07       	cpc	r25, r18
     fec:	c8 f0       	brcs	.+50     	; 0x1020 <Voltage_Percent+0x54>
	{
		return Volt_40_Percent;
	}
	else if(Value <= 510)
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	92 07       	cpc	r25, r18
     ff4:	c8 f0       	brcs	.+50     	; 0x1028 <Voltage_Percent+0x5c>
	{
		return Volt_50_Percent;
	}
	else if(Value <= 612)
     ff6:	22 e0       	ldi	r18, 0x02	; 2
     ff8:	85 36       	cpi	r24, 0x65	; 101
     ffa:	92 07       	cpc	r25, r18
     ffc:	c8 f0       	brcs	.+50     	; 0x1030 <Voltage_Percent+0x64>
	{
		return Volt_60_Percent;
	}
	else if(Value <= 714)
     ffe:	22 e0       	ldi	r18, 0x02	; 2
    1000:	8b 3c       	cpi	r24, 0xCB	; 203
    1002:	92 07       	cpc	r25, r18
    1004:	98 f0       	brcs	.+38     	; 0x102c <Voltage_Percent+0x60>
	{
		return Volt_70_Percent;
	}
	else if(Value <= 816)
    1006:	23 e0       	ldi	r18, 0x03	; 3
    1008:	81 33       	cpi	r24, 0x31	; 49
    100a:	92 07       	cpc	r25, r18
    100c:	98 f0       	brcs	.+38     	; 0x1034 <Voltage_Percent+0x68>
	{
		return Volt_80_Percent;
	}
	else if(Value <= 918)
    100e:	87 59       	subi	r24, 0x97	; 151
    1010:	93 40       	sbci	r25, 0x03	; 3
    1012:	90 f0       	brcs	.+36     	; 0x1038 <Voltage_Percent+0x6c>
    1014:	89 e0       	ldi	r24, 0x09	; 9
    1016:	08 95       	ret

Volt_Percent_t Voltage_Percent(void)
{
	uint16 Value = ADC_readChannel(POTENTIOMETER_CHANNEL);

	if(Value <= 102)
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret
	{
		return Volt_10_Percent;
	}
	else if(Value <= 204)
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	08 95       	ret
	}
	else if(Value <= 306)
	{
		return Volt_30_Percent;
	}
	else if(Value <= 408)
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	08 95       	ret
	}
	else if(Value <= 204)
	{
		return Volt_20_Percent;
	}
	else if(Value <= 306)
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	08 95       	ret
	}
	else if(Value <= 408)
	{
		return Volt_40_Percent;
	}
	else if(Value <= 510)
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	08 95       	ret
	}
	else if(Value <= 612)
	{
		return Volt_60_Percent;
	}
	else if(Value <= 714)
    102c:	86 e0       	ldi	r24, 0x06	; 6
    102e:	08 95       	ret
	}
	else if(Value <= 510)
	{
		return Volt_50_Percent;
	}
	else if(Value <= 612)
    1030:	85 e0       	ldi	r24, 0x05	; 5
    1032:	08 95       	ret
	}
	else if(Value <= 714)
	{
		return Volt_70_Percent;
	}
	else if(Value <= 816)
    1034:	87 e0       	ldi	r24, 0x07	; 7
    1036:	08 95       	ret
	{
		return Volt_80_Percent;
	}
	else if(Value <= 918)
    1038:	88 e0       	ldi	r24, 0x08	; 8
	else
	{
		return Volt_100_Percent;
	}

}
    103a:	08 95       	ret

0000103c <Servo_init>:
#include "Servo.h" ///delay


void Servo_init(void)
{
	SET_BIT(DDRD,PD5); /* Make OC1A pin as output */
    103c:	8d 9a       	sbi	0x11, 5	; 17
}
    103e:	08 95       	ret

00001040 <Servo_SetPostion>:

void Servo_SetPostion(Servo_Position_t Position)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    1040:	1d bc       	out	0x2d, r1	; 45
    1042:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
    1044:	23 ec       	ldi	r18, 0xC3	; 195
    1046:	39 e0       	ldi	r19, 0x09	; 9
    1048:	37 bd       	out	0x27, r19	; 39
    104a:	26 bd       	out	0x26, r18	; 38

	OCR1A = Position; /* Set the compare value */
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9b bd       	out	0x2b, r25	; 43
    1050:	8a bd       	out	0x2a, r24	; 42
	 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
	 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
	 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
	 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    1052:	82 e8       	ldi	r24, 0x82	; 130
    1054:	8f bd       	out	0x2f, r24	; 47

	/* Configure timer control register TCCR1B
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/8
	 */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS11);
    1056:	8a e1       	ldi	r24, 0x1A	; 26
    1058:	8e bd       	out	0x2e, r24	; 46

}
    105a:	08 95       	ret

0000105c <Servo_Off>:


void Servo_Off(void)
{
	TCNT1 = 0;
    105c:	1d bc       	out	0x2d, r1	; 45
    105e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 0;
    1060:	17 bc       	out	0x27, r1	; 39
    1062:	16 bc       	out	0x26, r1	; 38
	OCR1A = 0;
    1064:	1b bc       	out	0x2b, r1	; 43
    1066:	1a bc       	out	0x2a, r1	; 42
	TCCR1A = 0;
    1068:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    106a:	1e bc       	out	0x2e, r1	; 46

}
    106c:	08 95       	ret

0000106e <DcMotor_Rotate>:
 * Description : Function to control the speed and rotation direction of the motor
 * 1-speed is controlled by PWM driver which sends signals to enable pin of motor
 * 2-rotation is controlled by the two pins of H-Bridge of the motor
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    106e:	1f 93       	push	r17
    1070:	16 2f       	mov	r17, r22
	if(state == CW)
    1072:	88 23       	and	r24, r24
    1074:	31 f0       	breq	.+12     	; 0x1082 <DcMotor_Rotate+0x14>
	{
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0);
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,1);
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
	}
	else if(state == A_CW)
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 f1       	breq	.+100    	; 0x10de <DcMotor_Rotate+0x70>
	{
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,1);
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
	}
	else if(state == STOP)
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	11 f1       	breq	.+68     	; 0x10c2 <DcMotor_Rotate+0x54>
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0);
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
		PWM_Timer0_OFF(); //to don't let PWM signals to be sent when motor stops
	}

}
    107e:	1f 91       	pop	r17
    1080:	08 95       	ret
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
	if(state == CW)
	{
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,1);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	41 e0       	ldi	r20, 0x01	; 1
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
	}
	else if(state == A_CW)
	{
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,1);
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
    1092:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
    1096:	61 2f       	mov	r22, r17
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	88 27       	eor	r24, r24
    109c:	77 fd       	sbrc	r23, 7
    109e:	80 95       	com	r24
    10a0:	98 2f       	mov	r25, r24
    10a2:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
    10a6:	23 e3       	ldi	r18, 0x33	; 51
    10a8:	33 e3       	ldi	r19, 0x33	; 51
    10aa:	43 e2       	ldi	r20, 0x23	; 35
    10ac:	50 e4       	ldi	r21, 0x40	; 64
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	0e 94 62 07 	call	0xec4	; 0xec4 <PWM_Timer0_Start>
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0);
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
		PWM_Timer0_OFF(); //to don't let PWM signals to be sent when motor stops
	}

}
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
	}
	else if(state == STOP)
	{
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		PWM_Timer0_OFF(); //to don't let PWM signals to be sent when motor stops
    10d6:	0e 94 68 07 	call	0xed0	; 0xed0 <PWM_Timer0_OFF>
	}

}
    10da:	1f 91       	pop	r17
    10dc:	08 95       	ret
		GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,1);
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
	}
	else if(state == A_CW)
	{
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,1);
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	d2 cf       	rjmp	.-92     	; 0x1092 <DcMotor_Rotate+0x24>

000010ee <DcMotor_Init>:
 * Description : Function to initialize the Motor driver
 * 1- Set the two pins of motor which are responsible for ClockWise,AntiClockWise,Stop the motor
 */
void DcMotor_Init(void)
{
	GPIO_setupPinDirection(PORT_MOTOR,PINCW_MOTOR,PIN_OUTPUT);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_MOTOR,PINACW_MOTOR,PIN_OUTPUT);
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>
	GPIO_writePin(PORT_MOTOR,PINCW_MOTOR,0); //to initially stop the motor
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
	GPIO_writePin(PORT_MOTOR,PINACW_MOTOR,0); //to initially stop the motor
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
	GPIO_writePin(PORT_MOTOR,PINENABLE_MOTOR,0); //to initially stop the motor
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	63 e0       	ldi	r22, 0x03	; 3
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
}
    1120:	08 95       	ret

00001122 <init>:




void init(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <init+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupts */
	SREG |= (1<<7);
    112c:	8f b7       	in	r24, 0x3f	; 63
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8f bf       	out	0x3f, r24	; 63

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
    1132:	60 e8       	ldi	r22, 0x80	; 128
    1134:	75 e2       	ldi	r23, 0x25	; 37
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_init>
	UartReceive_setCallBack(UartReceiveMessage);
    113e:	8e ef       	ldi	r24, 0xFE	; 254
    1140:	98 e0       	ldi	r25, 0x08	; 8
    1142:	0e 94 6c 07 	call	0xed8	; 0xed8 <UartReceive_setCallBack>

	/* initialize ADC driver */
	ADC_ConfigType adcConfig = {ADC_REF_VOLT_CODE, F_CPU_8};
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&adcConfig);
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <ADC_init>

	/* initialize EEPROM driver*/
	Servo_init();
    1156:	0e 94 1e 08 	call	0x103c	; 0x103c <Servo_init>

	/* initialize DcMotor driver*/
	DcMotor_Init();
    115a:	0e 94 77 08 	call	0x10ee	; 0x10ee <DcMotor_Init>

	/* initialize Button driver*/
	Buzzer_init();
    115e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Buzzer_init>
	Buzzer_off();
    1162:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Buzzer_off>

	/* initialize Leds*/
	GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	63 e0       	ldi	r22, 0x03	; 3
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(YELLOW_LED_PORT, YELLOW_LED_PIN, PIN_OUTPUT);
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	62 e0       	ldi	r22, 0x02	; 2
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(YELLOW_LED_PORT, YELLOW_LED_PIN, PIN_OUTPUT);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	0e 94 10 06 	call	0xc20	; 0xc20 <GPIO_setupPinDirection>


}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Emergency_State>:
 * */


void Emergency_State(void)
{
	if((g_UartReceiveTemp <= 50) || (g_UartReceiveTemp == MACHINE_STOP))
    118e:	80 91 6c 01 	lds	r24, 0x016C
    1192:	83 33       	cpi	r24, 0x33	; 51
    1194:	28 f0       	brcs	.+10     	; 0x11a0 <Emergency_State+0x12>
    1196:	8b 39       	cpi	r24, 0x9B	; 155
    1198:	19 f0       	breq	.+6      	; 0x11a0 <Emergency_State+0x12>
	{
		State =  NORMAL_STATE;
		Buzzer_off();
	}
	else if(g_UartReceiveTemp == ABNORMAL_UART)
    119a:	80 3a       	cpi	r24, 0xA0	; 160
    119c:	31 f0       	breq	.+12     	; 0x11aa <Emergency_State+0x1c>
    119e:	08 95       	ret

void Emergency_State(void)
{
	if((g_UartReceiveTemp <= 50) || (g_UartReceiveTemp == MACHINE_STOP))
	{
		State =  NORMAL_STATE;
    11a0:	10 92 6b 01 	sts	0x016B, r1
		Buzzer_off();
    11a4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Buzzer_off>
    11a8:	08 95       	ret
	}
	else if(g_UartReceiveTemp == ABNORMAL_UART)
	{
		State =  ABNORMAL_STATE;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	80 93 6b 01 	sts	0x016B, r24
		Servo_SetPostion(Position_90);
    11b0:	8b eb       	ldi	r24, 0xBB	; 187
    11b2:	0e 94 20 08 	call	0x1040	; 0x1040 <Servo_SetPostion>
    11b6:	08 95       	ret

000011b8 <Abnormal_State>:




void Abnormal_State(void)
{
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11bc:	49 e1       	ldi	r20, 0x19	; 25
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	ca 01       	movw	r24, r20
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <Abnormal_State+0xa>
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ca:	83 ec       	ldi	r24, 0xC3	; 195
    11cc:	20 35       	cpi	r18, 0x50	; 80
    11ce:	38 07       	cpc	r19, r24
    11d0:	b9 f7       	brne	.-18     	; 0x11c0 <Abnormal_State+0x8>
	/*Wait 5 seconds in abnormal State*/
	_delay_ms(5000);

	if((g_UartReceiveTemp <= 50) || (g_UartReceiveTemp == MACHINE_STOP))
    11d2:	80 91 6c 01 	lds	r24, 0x016C
    11d6:	83 33       	cpi	r24, 0x33	; 51
    11d8:	18 f0       	brcs	.+6      	; 0x11e0 <Abnormal_State+0x28>
    11da:	8b 39       	cpi	r24, 0x9B	; 155
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <Abnormal_State+0x28>
    11de:	08 95       	ret
	{
		State =  NORMAL_STATE;
    11e0:	10 92 6b 01 	sts	0x016B, r1
		Buzzer_off();
    11e4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Buzzer_off>
		Servo_SetPostion(Position_0);
    11e8:	8c e7       	ldi	r24, 0x7C	; 124
    11ea:	0e 94 20 08 	call	0x1040	; 0x1040 <Servo_SetPostion>
    11ee:	88 e8       	ldi	r24, 0x88	; 136
    11f0:	93 e1       	ldi	r25, 0x13	; 19
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Abnormal_State+0x3a>
		_delay_ms(SERRVO_PERIOD_MS);
		Servo_Off();
    11f6:	0e 94 2e 08 	call	0x105c	; 0x105c <Servo_Off>
    11fa:	08 95       	ret

000011fc <UartReceiveMessage>:


void UartReceiveMessage(void)
{

	g_UartReceiveTemp = UART_recieveByte();
    11fc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <UART_recieveByte>
    1200:	80 93 6c 01 	sts	0x016C, r24
}
    1204:	08 95       	ret

00001206 <Machine>:
/*******************************************************************************
 *                      Functions implementation                                  *
 *******************************************************************************/
void Machine(void)
{
	if(Stop_Machine_Flag == 0)
    1206:	80 91 6a 01 	lds	r24, 0x016A
    120a:	81 11       	cpse	r24, r1
    120c:	08 95       	ret
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();
    120e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Voltage_Percent>

		switch(Machine_Volt)
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	c9 f1       	breq	.+114    	; 0x1288 <Machine+0x82>
    1216:	85 30       	cpi	r24, 0x05	; 5
    1218:	68 f0       	brcs	.+26     	; 0x1234 <Machine+0x2e>
    121a:	87 30       	cpi	r24, 0x07	; 7
    121c:	31 f1       	breq	.+76     	; 0x126a <Machine+0x64>
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	b0 f0       	brcs	.+44     	; 0x124e <Machine+0x48>
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	b1 f1       	breq	.+108    	; 0x1292 <Machine+0x8c>
    1226:	89 30       	cpi	r24, 0x09	; 9
    1228:	89 f7       	brne	.-30     	; 0x120c <Machine+0x6>
		case Volt_90_Percent:
			DcMotor_Rotate(CW, 90);
			break;

		case Volt_100_Percent:
			DcMotor_Rotate(CW, 100);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	64 e6       	ldi	r22, 0x64	; 100
    122e:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1232:	08 95       	ret
{
	if(Stop_Machine_Flag == 0)
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	19 f1       	breq	.+70     	; 0x127e <Machine+0x78>
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	90 f0       	brcs	.+36     	; 0x1260 <Machine+0x5a>
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	71 f1       	breq	.+92     	; 0x129c <Machine+0x96>
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	21 f7       	brne	.-56     	; 0x120c <Machine+0x6>
		case Volt_30_Percent:
			DcMotor_Rotate(CW, 30);
			break;

		case Volt_40_Percent:
			DcMotor_Rotate(CW, 40);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	68 e2       	ldi	r22, 0x28	; 40
    1248:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    124c:	08 95       	ret
{
	if(Stop_Machine_Flag == 0)
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
    124e:	85 30       	cpi	r24, 0x05	; 5
    1250:	89 f0       	breq	.+34     	; 0x1274 <Machine+0x6e>
    1252:	86 30       	cpi	r24, 0x06	; 6
    1254:	d9 f6       	brne	.-74     	; 0x120c <Machine+0x6>
		case Volt_60_Percent:
			DcMotor_Rotate(CW, 60);
			break;

		case Volt_70_Percent:
			DcMotor_Rotate(CW, 70);
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	66 e4       	ldi	r22, 0x46	; 70
    125a:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    125e:	08 95       	ret
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
		{
		case Volt_10_Percent:
			DcMotor_Rotate(CW, 10);
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	6a e0       	ldi	r22, 0x0A	; 10
    1264:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1268:	08 95       	ret
		case Volt_70_Percent:
			DcMotor_Rotate(CW, 70);
			break;

		case Volt_80_Percent:
			DcMotor_Rotate(CW, 80);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	60 e5       	ldi	r22, 0x50	; 80
    126e:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1272:	08 95       	ret
		case Volt_50_Percent:
			DcMotor_Rotate(CW, 50);
			break;

		case Volt_60_Percent:
			DcMotor_Rotate(CW, 60);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	6c e3       	ldi	r22, 0x3C	; 60
    1278:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    127c:	08 95       	ret
		{
		case Volt_10_Percent:
			DcMotor_Rotate(CW, 10);
			break;
		case Volt_20_Percent:
			DcMotor_Rotate(CW, 20);
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	64 e1       	ldi	r22, 0x14	; 20
    1282:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1286:	08 95       	ret
		case Volt_40_Percent:
			DcMotor_Rotate(CW, 40);
			break;

		case Volt_50_Percent:
			DcMotor_Rotate(CW, 50);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	62 e3       	ldi	r22, 0x32	; 50
    128c:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1290:	08 95       	ret
		case Volt_80_Percent:
			DcMotor_Rotate(CW, 80);
			break;

		case Volt_90_Percent:
			DcMotor_Rotate(CW, 90);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	6a e5       	ldi	r22, 0x5A	; 90
    1296:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    129a:	08 95       	ret
		case Volt_20_Percent:
			DcMotor_Rotate(CW, 20);
			break;

		case Volt_30_Percent:
			DcMotor_Rotate(CW, 30);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	6e e1       	ldi	r22, 0x1E	; 30
    12a0:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    12a4:	08 95       	ret

000012a6 <Normal_State>:




void Normal_State(void)
{
    12a6:	1f 93       	push	r17
/*******************************************************************************
 *                      Functions implementation                                  *
 *******************************************************************************/
void Machine(void)
{
	if(Stop_Machine_Flag == 0)
    12a8:	80 91 6a 01 	lds	r24, 0x016A
    12ac:	88 23       	and	r24, r24
    12ae:	89 f0       	breq	.+34     	; 0x12d2 <Normal_State+0x2c>
{
	/*Running  the machine*/
	Machine();

	/*Temperature states*/
	if(g_UartReceiveTemp < 20)
    12b0:	80 91 6c 01 	lds	r24, 0x016C
    12b4:	84 31       	cpi	r24, 0x14	; 20
    12b6:	28 f1       	brcs	.+74     	; 0x1302 <Normal_State+0x5c>
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 1);
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 0);
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 0);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp < 40)
    12b8:	88 32       	cpi	r24, 0x28	; 40
    12ba:	c0 f1       	brcs	.+112    	; 0x132c <Normal_State+0x86>
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 0);
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 0);
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 1);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp <= 50)
    12bc:	83 33       	cpi	r24, 0x33	; 51
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <Normal_State+0x1c>
    12c0:	4a c0       	rjmp	.+148    	; 0x1356 <Normal_State+0xb0>
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 0);
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 1);
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 0);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp <= LM35_VOLTAGE_LIMIT)
    12c2:	87 39       	cpi	r24, 0x97	; 151
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <Normal_State+0x22>
    12c6:	61 c0       	rjmp	.+194    	; 0x138a <Normal_State+0xe4>
		State = EMERGENCY_STATE;
		DcMotor_Rotate(STOP, 0);
		Stop_Machine_Flag = 1;
		Buzzer_on();
	}
	else if(g_UartReceiveTemp == MACHINE_STOP)
    12c8:	8b 39       	cpi	r24, 0x9B	; 155
    12ca:	09 f4       	brne	.+2      	; 0x12ce <Normal_State+0x28>
    12cc:	6b c0       	rjmp	.+214    	; 0x13a4 <Normal_State+0xfe>
	else
	{
		/*Do nothing*/
	}

}
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret
 *******************************************************************************/
void Machine(void)
{
	if(Stop_Machine_Flag == 0)
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();
    12d2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Voltage_Percent>

		switch(Machine_Volt)
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	09 f4       	brne	.+2      	; 0x12dc <Normal_State+0x36>
    12da:	8c c0       	rjmp	.+280    	; 0x13f4 <Normal_State+0x14e>
    12dc:	85 30       	cpi	r24, 0x05	; 5
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <Normal_State+0x3c>
    12e0:	45 c0       	rjmp	.+138    	; 0x136c <Normal_State+0xc6>
    12e2:	87 30       	cpi	r24, 0x07	; 7
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <Normal_State+0x42>
    12e6:	77 c0       	rjmp	.+238    	; 0x13d6 <Normal_State+0x130>
    12e8:	88 30       	cpi	r24, 0x08	; 8
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <Normal_State+0x48>
    12ec:	65 c0       	rjmp	.+202    	; 0x13b8 <Normal_State+0x112>
    12ee:	88 30       	cpi	r24, 0x08	; 8
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <Normal_State+0x4e>
    12f2:	85 c0       	rjmp	.+266    	; 0x13fe <Normal_State+0x158>
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	e1 f6       	brne	.-72     	; 0x12b0 <Normal_State+0xa>
		case Volt_90_Percent:
			DcMotor_Rotate(CW, 90);
			break;

		case Volt_100_Percent:
			DcMotor_Rotate(CW, 100);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	64 e6       	ldi	r22, 0x64	; 100
    12fc:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1300:	d7 cf       	rjmp	.-82     	; 0x12b0 <Normal_State+0xa>
	Machine();

	/*Temperature states*/
	if(g_UartReceiveTemp < 20)
	{
		State = NORMAL_STATE;
    1302:	10 92 6b 01 	sts	0x016B, r1
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 1);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	63 e0       	ldi	r22, 0x03	; 3
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 0);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	40 e0       	ldi	r20, 0x00	; 0
	}
	else if(g_UartReceiveTemp <= 50)
	{
		State = NORMAL_STATE;
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 0);
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 1);
    1316:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 0);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		Stop_Machine_Flag = 0;
    1324:	10 92 6a 01 	sts	0x016A, r1
	else
	{
		/*Do nothing*/
	}

}
    1328:	1f 91       	pop	r17
    132a:	08 95       	ret
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 0);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp < 40)
	{
		State = NORMAL_STATE;
    132c:	10 92 6b 01 	sts	0x016B, r1
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 0);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	63 e0       	ldi	r22, 0x03	; 3
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 0);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 1);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		Stop_Machine_Flag = 0;
    134e:	10 92 6a 01 	sts	0x016A, r1
	else
	{
		/*Do nothing*/
	}

}
    1352:	1f 91       	pop	r17
    1354:	08 95       	ret
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 1);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp <= 50)
	{
		State = NORMAL_STATE;
    1356:	10 92 6b 01 	sts	0x016B, r1
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, 0);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, 1);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	d5 cf       	rjmp	.-86     	; 0x1316 <Normal_State+0x70>
{
	if(Stop_Machine_Flag == 0)
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	e9 f1       	breq	.+122    	; 0x13ea <Normal_State+0x144>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	60 f1       	brcs	.+88     	; 0x13cc <Normal_State+0x126>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	09 f4       	brne	.+2      	; 0x137a <Normal_State+0xd4>
    1378:	47 c0       	rjmp	.+142    	; 0x1408 <Normal_State+0x162>
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	09 f0       	breq	.+2      	; 0x1380 <Normal_State+0xda>
    137e:	98 cf       	rjmp	.-208    	; 0x12b0 <Normal_State+0xa>
		case Volt_30_Percent:
			DcMotor_Rotate(CW, 30);
			break;

		case Volt_40_Percent:
			DcMotor_Rotate(CW, 40);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	68 e2       	ldi	r22, 0x28	; 40
    1384:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1388:	93 cf       	rjmp	.-218    	; 0x12b0 <Normal_State+0xa>
		GPIO_writePin(YELLOW_LED_PORT, YELLOW_LED_PIN, 0);
		Stop_Machine_Flag = 0;
	}
	else if(g_UartReceiveTemp <= LM35_VOLTAGE_LIMIT)
	{
		State = EMERGENCY_STATE;
    138a:	11 e0       	ldi	r17, 0x01	; 1
    138c:	10 93 6b 01 	sts	0x016B, r17
		DcMotor_Rotate(STOP, 0);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
		Stop_Machine_Flag = 1;
    1398:	10 93 6a 01 	sts	0x016A, r17
		Buzzer_on();
    139c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <Buzzer_on>
	else
	{
		/*Do nothing*/
	}

}
    13a0:	1f 91       	pop	r17
    13a2:	08 95       	ret
		Stop_Machine_Flag = 1;
		Buzzer_on();
	}
	else if(g_UartReceiveTemp == MACHINE_STOP)
	{
		State = NORMAL_STATE;
    13a4:	10 92 6b 01 	sts	0x016B, r1
		DcMotor_Rotate(STOP, 0);
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
		Stop_Machine_Flag = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 6a 01 	sts	0x016A, r24
    13b6:	8b cf       	rjmp	.-234    	; 0x12ce <Normal_State+0x28>
{
	if(Stop_Machine_Flag == 0)
	{
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
    13b8:	85 30       	cpi	r24, 0x05	; 5
    13ba:	91 f0       	breq	.+36     	; 0x13e0 <Normal_State+0x13a>
    13bc:	86 30       	cpi	r24, 0x06	; 6
    13be:	09 f0       	breq	.+2      	; 0x13c2 <Normal_State+0x11c>
    13c0:	77 cf       	rjmp	.-274    	; 0x12b0 <Normal_State+0xa>
		case Volt_60_Percent:
			DcMotor_Rotate(CW, 60);
			break;

		case Volt_70_Percent:
			DcMotor_Rotate(CW, 70);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	66 e4       	ldi	r22, 0x46	; 70
    13c6:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13ca:	72 cf       	rjmp	.-284    	; 0x12b0 <Normal_State+0xa>
		Volt_Percent_t Machine_Volt = Voltage_Percent();

		switch(Machine_Volt)
		{
		case Volt_10_Percent:
			DcMotor_Rotate(CW, 10);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	6a e0       	ldi	r22, 0x0A	; 10
    13d0:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13d4:	6d cf       	rjmp	.-294    	; 0x12b0 <Normal_State+0xa>
		case Volt_70_Percent:
			DcMotor_Rotate(CW, 70);
			break;

		case Volt_80_Percent:
			DcMotor_Rotate(CW, 80);
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	60 e5       	ldi	r22, 0x50	; 80
    13da:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13de:	68 cf       	rjmp	.-304    	; 0x12b0 <Normal_State+0xa>
		case Volt_50_Percent:
			DcMotor_Rotate(CW, 50);
			break;

		case Volt_60_Percent:
			DcMotor_Rotate(CW, 60);
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	6c e3       	ldi	r22, 0x3C	; 60
    13e4:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13e8:	63 cf       	rjmp	.-314    	; 0x12b0 <Normal_State+0xa>
		{
		case Volt_10_Percent:
			DcMotor_Rotate(CW, 10);
			break;
		case Volt_20_Percent:
			DcMotor_Rotate(CW, 20);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	64 e1       	ldi	r22, 0x14	; 20
    13ee:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13f2:	5e cf       	rjmp	.-324    	; 0x12b0 <Normal_State+0xa>
		case Volt_40_Percent:
			DcMotor_Rotate(CW, 40);
			break;

		case Volt_50_Percent:
			DcMotor_Rotate(CW, 50);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	62 e3       	ldi	r22, 0x32	; 50
    13f8:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    13fc:	59 cf       	rjmp	.-334    	; 0x12b0 <Normal_State+0xa>
		case Volt_80_Percent:
			DcMotor_Rotate(CW, 80);
			break;

		case Volt_90_Percent:
			DcMotor_Rotate(CW, 90);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	6a e5       	ldi	r22, 0x5A	; 90
    1402:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1406:	54 cf       	rjmp	.-344    	; 0x12b0 <Normal_State+0xa>
		case Volt_20_Percent:
			DcMotor_Rotate(CW, 20);
			break;

		case Volt_30_Percent:
			DcMotor_Rotate(CW, 30);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	6e e1       	ldi	r22, 0x1E	; 30
    140c:	0e 94 37 08 	call	0x106e	; 0x106e <DcMotor_Rotate>
    1410:	4f cf       	rjmp	.-354    	; 0x12b0 <Normal_State+0xa>

00001412 <main>:

int main(void)
{

	/* initialization of project*/
	init();
    1412:	0e 94 91 08 	call	0x1122	; 0x1122 <init>

	while(1)
	{
		/*Selecting state of project*/
		switch (State)
    1416:	80 91 6b 01 	lds	r24, 0x016B
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	41 f0       	breq	.+16     	; 0x142e <main+0x1c>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	48 f4       	brcc	.+18     	; 0x1434 <main+0x22>
		{
		case NORMAL_STATE:
			Normal_State();
    1422:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Normal_State>
	init();

	while(1)
	{
		/*Selecting state of project*/
		switch (State)
    1426:	80 91 6b 01 	lds	r24, 0x016B
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	c1 f7       	brne	.-16     	; 0x141e <main+0xc>
		case NORMAL_STATE:
			Normal_State();
			break;

		case EMERGENCY_STATE:
			Emergency_State();
    142e:	0e 94 c7 08 	call	0x118e	; 0x118e <Emergency_State>
    1432:	f1 cf       	rjmp	.-30     	; 0x1416 <main+0x4>
	init();

	while(1)
	{
		/*Selecting state of project*/
		switch (State)
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	89 f7       	brne	.-30     	; 0x141a <main+0x8>
		case EMERGENCY_STATE:
			Emergency_State();
			break;

		case ABNORMAL_STATE:
			Abnormal_State();
    1438:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Abnormal_State>
    143c:	ec cf       	rjmp	.-40     	; 0x1416 <main+0x4>

0000143e <__udivmodsi4>:
    143e:	a1 e2       	ldi	r26, 0x21	; 33
    1440:	1a 2e       	mov	r1, r26
    1442:	aa 1b       	sub	r26, r26
    1444:	bb 1b       	sub	r27, r27
    1446:	fd 01       	movw	r30, r26
    1448:	0d c0       	rjmp	.+26     	; 0x1464 <__udivmodsi4_ep>

0000144a <__udivmodsi4_loop>:
    144a:	aa 1f       	adc	r26, r26
    144c:	bb 1f       	adc	r27, r27
    144e:	ee 1f       	adc	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	a2 17       	cp	r26, r18
    1454:	b3 07       	cpc	r27, r19
    1456:	e4 07       	cpc	r30, r20
    1458:	f5 07       	cpc	r31, r21
    145a:	20 f0       	brcs	.+8      	; 0x1464 <__udivmodsi4_ep>
    145c:	a2 1b       	sub	r26, r18
    145e:	b3 0b       	sbc	r27, r19
    1460:	e4 0b       	sbc	r30, r20
    1462:	f5 0b       	sbc	r31, r21

00001464 <__udivmodsi4_ep>:
    1464:	66 1f       	adc	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	1a 94       	dec	r1
    146e:	69 f7       	brne	.-38     	; 0x144a <__udivmodsi4_loop>
    1470:	60 95       	com	r22
    1472:	70 95       	com	r23
    1474:	80 95       	com	r24
    1476:	90 95       	com	r25
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	bd 01       	movw	r22, r26
    147e:	cf 01       	movw	r24, r30
    1480:	08 95       	ret

00001482 <__prologue_saves__>:
    1482:	2f 92       	push	r2
    1484:	3f 92       	push	r3
    1486:	4f 92       	push	r4
    1488:	5f 92       	push	r5
    148a:	6f 92       	push	r6
    148c:	7f 92       	push	r7
    148e:	8f 92       	push	r8
    1490:	9f 92       	push	r9
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	ca 1b       	sub	r28, r26
    14ac:	db 0b       	sbc	r29, r27
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	09 94       	ijmp

000014ba <__epilogue_restores__>:
    14ba:	2a 88       	ldd	r2, Y+18	; 0x12
    14bc:	39 88       	ldd	r3, Y+17	; 0x11
    14be:	48 88       	ldd	r4, Y+16	; 0x10
    14c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    14cc:	b9 84       	ldd	r11, Y+9	; 0x09
    14ce:	c8 84       	ldd	r12, Y+8	; 0x08
    14d0:	df 80       	ldd	r13, Y+7	; 0x07
    14d2:	ee 80       	ldd	r14, Y+6	; 0x06
    14d4:	fd 80       	ldd	r15, Y+5	; 0x05
    14d6:	0c 81       	ldd	r16, Y+4	; 0x04
    14d8:	1b 81       	ldd	r17, Y+3	; 0x03
    14da:	aa 81       	ldd	r26, Y+2	; 0x02
    14dc:	b9 81       	ldd	r27, Y+1	; 0x01
    14de:	ce 0f       	add	r28, r30
    14e0:	d1 1d       	adc	r29, r1
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	ed 01       	movw	r28, r26
    14ee:	08 95       	ret

000014f0 <_exit>:
    14f0:	f8 94       	cli

000014f2 <__stop_program>:
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <__stop_program>
